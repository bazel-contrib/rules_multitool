# generated by multitool

load("//:toolchain_info.bzl", "toolchain_info")

_TOOLCHAIN_TYPE = "//tools/{name}:toolchain_type"

def _tool_impl(ctx):
    toolchain = ctx.toolchains[_TOOLCHAIN_TYPE]
    output = ctx.actions.declare_file(ctx.label.name)
    ctx.actions.symlink(output = output, target_file = toolchain.executable)
    return [DefaultInfo(executable = output)]

tool = rule(executable = True, implementation = _tool_impl, toolchains = [_TOOLCHAIN_TYPE])

def _declare_toolchain(name, os, cpu):
    toolchain_info(
        name = "{name}_{os}_{cpu}_toolchain_info".format(name=name, os=os, cpu=cpu),
        executable = "@@{hub_name}.{os}_{cpu}//tools/{name}:{os}_{cpu}_executable".format(name=name, os=os, cpu=cpu),
        os = os,
        cpu = cpu,
    )

    native.toolchain(
        name = "{name}_{os}_{cpu}_toolchain_exec".format(name=name, os=os, cpu=cpu),
        toolchain = ":{name}_{os}_{cpu}_toolchain_info".format(name=name, os=os, cpu=cpu),
        toolchain_type = _TOOLCHAIN_TYPE,
        exec_compatible_with = [
            "@platforms//cpu:{cpu}".format(cpu=cpu),
            "@platforms//os:{os}".format(os=os),
        ],
    )

    native.toolchain(
        name = "{name}_{os}_{cpu}_toolchain_target".format(name=name, os=os, cpu=cpu),
        toolchain = ":{name}_{os}_{cpu}_toolchain_info".format(name=name, os=os, cpu=cpu),
        toolchain_type = _TOOLCHAIN_TYPE,
        target_compatible_with = [
            "@platforms//cpu:{cpu}".format(cpu=cpu),
            "@platforms//os:{os}".format(os=os),
        ],
    )

def declare_toolchains():
    "toolchain targets"
    {toolchains}
